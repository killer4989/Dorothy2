//Dorothy2
//caption=download
//version=1.04
//hint=HTTP = download(url [,autoRedirect:Boolean [,requestHeader:Object]])
//match=
//author=xor
//generator=
//path=common
//end
function download(url,redirect,rHeader){
	var url2 = new URL(url);
	if(url2.scheme == 'https'){
		var http = new HTTPS;
	}
	else{
		var http = new HTTP;
	}
	var data = '';
	http.debug = debug;
	http.version = (folderdata.HttpVersion)? '1.1' : '1.0';
	http.timeout = folderdata.HttpTimeout;
	http.proxy = urlinfo.proxy;
	http.requestHeader['User-Agent'] = headers['User-Agent'];
	var cookie = new IrvineCookieManager;
	http.requestHeader['Cookie'] = cookie.getCookie(url);
	if(folderdata.UrlEncode){
		url = decodeURI(url);
		url = encodeURI(url);
	}

	if(!isUndefined(redirect)){
		http.autoRedirect = redirect;
	}
	else{
		redirect=false;
	}
	if(!isUndefined(rHeader)){
		var i;
		for(i in rHeader){
			http.requestHeader[i] = rHeader[i];
		}
	}

	//http.get(url)でチャンクの終了コード０が無いと HTTP.get error　になる（サーバーの方が悪いんだけど）
	//http.debug=trueにすると出来るんだけどねェ〜
	//oz氏のdownload2.dmsのソースを拝借、


	url2=new URL(url);
	var buf = new StringBuffer(1024);
	var size = 0;
	try {
		do{
			http.request('GET',url2);
			http.response();
			if((http.responseHeader.code == 301
			    || http.responseHeader.code == 302
			    || http.responseHeader.code == 303
			   )&& redirect){
				url2 = new URL(url2.expand(http.responseHeader.location));
				 continue;
			}
				
			if(http.responseHeader.code.toString(10)[0] == '2') {
				if (http.responseHeader.hasKey('transfer-encoding')
				 && http.responseHeader['transfer-encoding'] == 'chunked') {
					buf = http.readln();
					buf.toString().match(/(^[0-9a-f]+)/i);
					if (buf.toString().match(/^([0-9a-f]+)/i) != null) {
						size = parseInt('0x' + RegExp.$1);
					}
					while (size > 0) {
						data += http.read(size);
						http.readln();
						buf = http.readln().trim();
						if (buf.toString().match(/^([0-9a-f]+)/i) == null) {
							//data = '';
							break;
						}
						size = parseInt('0x' + RegExp.$1);
					}
				} else {
					data = http.read();
				}
			}
		}while(false);
	}
	catch (e) {
		println('ソケットエラー>' + e);
	}
	finally {
		http.disconnect();
	}
	http['data'] = data;
	return http;
}