//Dorothy2
//caption=gif decode
//version=1.0
//hint=test
//match=
//author=xor
//path=common
//end
function decodeGIF(GIF){
	common_load('int2bit');
	var c=0;
	println('GIF decode');
	var stack = new stack();
	var num_bytes = GIF.Block.Image_Block.Image_Width * GIF.Block.Image_Block.Image_Height;//( w * h )
	//println(c++ +' num_bytes='+num_bytes);

	//var buff = new StringBuffer(GIF.Block.Image_Block.Image_Data[1].text);
	var buff = new StringBuffer(GIF.Block.Image_Block.Image_Data);
	var initial_code_size = GIF.Block.Image_Block.LZW_Minimum_Code_Size;
	//var initial_code_size = char(buff[0]);
	var clear_code = 1 << initial_code_size;
	var end_code = clear_code + 1;
	//println(c++ +' clear_code='+clear_code+' end_code='+end_code);
	var code_size = initial_code_size + 1;
	var code_mask = (1 << code_size) - 1;
	//println(c++ +' code_mask=' + int2bit(code_mask));
	var bits = 0, data = 0, available = 0;
//available =clear_code + 2;
	if(code_size < 3 || 12 < code_size){
		return false;
	}
	var out = new Array(num_bytes);

	var prefix = new Array(4096);
	var suffix = new Array(4096);
	
	var pointer = 0;
	
	for(var i = 0 ; i < clear_code ; i++){
		prefix(i) = 0;
		suffix(i) = i;
	}
	var count = 0, code = 0, old_code = -1, first_character = 0;
	while(pointer <  num_bytes){
		var num = buff.char(pointer++);
		//var num = GIF.Block.Image_Block.Block_Size[1];
		//println(c++ +' num='+num);
		for(var i = 0 ; i < num ; i++){
			var ch = buff.char(pointer + i);
			//println(c++ +' バッファからch='+ch+'('+int2bit(ch)+')');
			data += ch << bits;
			bits += 8;
			//println(c++ +' data='+data+'('+int2bit(data)+')'+' bits='+bits+' ch='+ch+' code_size='+code_size);
			//println(c++ +' bits >= code_size --->'+(bits >= code_size));
			while(bits >= code_size){
				code = data & code_mask;
				data = data >> code_size;
				bits -= code_size;
				//println(c++ +' code='+code+' data='+data+' bits='+bits);
				//println(c++ +' 取り出したcode='+code+'('+int2bit(code)+')');
				if(code == end_code){
					//println(c++ +'end_code が見つかった');
					return out;
				}
				
				if(code == clear_code){
					//println(c++ +' code == clear_code');
					code_size = initial_code_size + 1;
					code_mask = (1 << code_size) - 1;
					available =clear_code + 2;
					old_code = - 1;
				}
				else if(old_code == -1){
					//println(c++ +' if(old_code == -1)');
					//println(c++ +'   out['+count+']='+suffix[code]);
					out[count++] = (suffix[code]);//xxxxxxxxxxxxxxxxxxxxxx
					first_character = old_code = code;
					//println(c++ +'   first_character='+first_character+' old_code='+old_code+' code='+code);
				}
				else if(code > available){
					//delete [] out;//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
					//out = null;//xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
					//println(c++ +' code > available');
					//println(c++ +' code='+code+' available='+available);
					return false;
				}
				else{
					var incode = code;
					if(code == available){
						//println(c++ +' code == available');
						stack.push(first_character);
						code = old_code;
					}
					
					while(code > clear_code){
						stack.push(suffix[code]);
						code = prefix[code];
					}
					
					stack.push(first_character = suffix[code]);
					prefix[available] = old_code;
					suffix[available] = first_character;
					available++;
					//println(c++ +'available='+available);
					
					if(((available & code_mask) == 0) && (available < 4096)){
						//println(c++ +' ((available & code_mask) == 0) && (available < 4096)');
						code_size++;
						code_mask += available;
					}
					
					old_code = incode;
					while(!stack.empty()){
						out[count++] = (stack.top());
						stack.pop();
					}
				}
			}
		}
		pointer += num;
	}
	return false;
}