//Dorothy2
//caption=download2
//version=0.01
//hint=download.dms 改変版（Irvine 1.2.1以下では「Transfer-Encoding: chunked」を自前処理）
//match=
//author=xor, oz
//generator=
//path=common
//end
function download2(url,redirect,rHeader){
	var http = new HTTP;
	var data = '';
	http.debug = debug;
	http.version = (folderdata.HttpVersion)? '1.1' : '1.0';
	http.timeout = folderdata.HttpTimeout;
	http.proxy = urlinfo.proxy;
	http.requestHeader['User-Agent'] = headers['User-Agent'];
	var cookie = new IrvineCookieManager;
	http.requestHeader['Cookie'] = cookie.getCookie(url);
	if (folderdata.UrlEncode){
		url = decodeURI(url);
		url = encodeURI(url);
	}

	if (!isUndefined(redirect))
		http.autoRedirect = redirect;
	if (!isUndefined(rHeader)) {
		var i;
		for (i in rHeader)
			http.requestHeader[i] = rHeader[i];
	}

	var e, data = '';
	if (http.version == '1.0' || IrvineInfo.version >= '1.2.2') {
		try {
			data = http.get(url);
		}
		catch (e) {
			println('ソケットエラー>' + e);
		} 
	} else {
		var buf = new StringBuffer(1024);
		var size = 0;
		try {
			http.request('GET', url);
			http.response();
			if(http.responseHeader.code == 200) {
				if (http.responseHeader.hasKey('transfer-encoding')
				 && http.responseHeader['transfer-encoding'] == 'chunked') {
					buf = http.readln();
					buf.toString().match(/(^[0-9a-f]+)/i);
					if (buf.toString().match(/^([0-9a-f]+)/i) != null) {
						size = parseInt('0x' + RegExp.$1);
					}
					while (size > 0) {
						data += http.read(size);
						http.readln();
						buf = http.readln();
						if (buf.toString().match(/^([0-9a-f]+)/i) == null) {
							data = '';
							break;
						}
						size = parseInt('0x' + RegExp.$1);
					}
				} else {
					data = http.read();
				}
			}
		}
		catch (e) {
			println('ソケットエラー>' + e);
		}
		finally {
			http.disconnect();
		}
	}
	http['data'] = data;
	return http;
}
